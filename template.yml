AWSTemplateFormatVersion: 2010-09-09
Transform:
- AWS::Serverless-2016-10-31
- AWS::CodeStar

Parameters:
  ProjectId:
    Type: String
    Description: AWS CodeStar projectID used to associate new resources to team members
  CodeDeployRole:
    Type: String
    Description: IAM role to allow AWS CodeDeploy to manage deployment of AWS Lambda functions
  Stage:
    Type: String
    Description: The name for a project pipeline stage, such as Staging or Prod, for which resources are provisioned and deployed.
    Default: 'Prod'
  BucketName:
    Type: String
    Default: 'leads-for-lambda'

Globals:
  Function:
    AutoPublishAlias: live
    DeploymentPreference:
      Enabled: true
      Type: Canary10Percent5Minutes
      Role: !Ref CodeDeployRole

Resources:
  Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: leads/
                  - Name: suffix
                    Value: .txt
            Function: !GetAtt GetContacts.Arn
  GetContacts:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'awscodestar-${ProjectId}-lambda-GetContacts'
      Handler: index.getContacts
      Runtime: nodejs12.x
      Role:
        Fn::GetAtt:
        - LambdaExecutionRole
        - Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /
            Method: get
      Environment:
        Variables:
          HUNTER_KEY: c82985fe22ffaa579f44ce44ece125be049bbcc4
  LambdaExecutionRole:
    Description: Creating service role in IAM for AWS Lambda
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'CodeStar-${ProjectId}-Execution${Stage}'
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub 'arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/CodeStar_${ProjectId}_PermissionsBoundary'
  S3ReadPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      policyName: S3ReadPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowLambdaToReadBucket
            Effect: Allow
            Action:
              - 's3:Get*'
            Resource:  
                - !Sub arn:aws:s3:::${BucketName}
                - !Sub arn:aws:s3:::${BucketName}/*
      Roles:
        - !Ref LambdaExecutionRole
  IAMPolicy:
    Type: 'AWS::IAM::Policy'
    Properties:
      policyName: IAMPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AllowIAMtoGetandPut
            Effect: Allow
            Action:
              - 'iam:GetRole*'
              - 'iam:PutRole*'
      Roles:
        - !Ref LambdaExecutionRole
